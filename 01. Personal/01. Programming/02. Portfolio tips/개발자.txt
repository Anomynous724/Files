1. Presentable Design/UI
디자인에 신경을 많이 써라.

포트폴리오에 당신이 개발한 웹사이트를 나열하게 될텐데, 당연하게도 평가자가 가장 먼저 보게되는 화면이며, 당신의 포트폴리오 자체도 당신의 프로젝트이기 때문에 가장 중요하다.

그 자리에서 바로 보여줄 수 있고 즉시 설명 가능한 디자인과 UI로 만들어라.

당신이 UI디자이너가 아니라 프론트엔드 개발자나 백엔드 개발자라면, 혹은 당신의 디자인 스킬이 끔찍하다면, 바닥부터 모두 디자인할 필요는 없다. 이미 잘 만들어진 템플릿들을 잘 활용하는 것도 능력이다.

2. Good Hosting & Domain
@@.herokuapp.com 같은 무료 서브도메인 쓰지 말아라. 비싸지 않고 어렵지 않으니 반드시 커스텀 도메인을 구매해서 연결해라.

반드시 https(SSL)를 지원해라. Chrome은 https를 지원하지 않으면 경고를 띄우기 때문에 UX가 좋지 않다.

기본적인 것들이라 이런 것들을 하지 않으면 평가자에게 꼼꼼하지 못하다거나 사소한 것을 신경쓰지 않는다는 느낌을 줄 수도 있다.

3. Keep it simple
가장 중요한 몇 개의 프로젝트만 넣고 불필요한 것은 모두 빼고 최소화해라. 가능한한 글도 최대한 짧게 써라.

프로젝트는 항상 가장 중요한 것들을 맨 위에 써라. 너무 길면 읽지 않는다. 너무 많아도 보기 귀찮고 어렵다. 자기소개만 10줄이면 아무도 읽지 않을 것이다. 최대한 짧고 심플하게 유지해라.

큰 회사들의 랜딩페이지를 참고해봐라. 10-15페이지의 구구절절한 페이지들보다 하나의 깔끔하고 간결한 싱글 랜딩페이지가 더 매력적이다.

4. Don't exaggerate skills
당신의 스킬셋을 과장하지말아라. 거짓말하지말아라. 솔직해져라.

루비 온 레일즈 튜토리얼을 따라해봤다고 당신이 루비 개발자가 되지 않는다.

사용해본 모든 언어와 모든 프레임워크를 나열하지 말아라. 평가자는 멍청하지 않다.

모든 분야를 조금씩 두루 아는 것보다 몇 가지에 전문적인 것이 훨씬 좋다.

5. Live Examples/Demos
바로 라이브 프로젝트를 볼 수 있는 버튼을 만들어서 직접 들어가볼 수 있도록 해라.

해당 프로젝트를 깃허브에 올려놓고 코드도 즉시 볼 수 있도록 링크버튼을 만들어라.

화면이 없는 프로젝트(CLI툴, 라이브러리 등)는 예외다. 깃허브에 코드만 올려놓아도 된다. 대신 README는 잘적자.

절대 프로젝트의 이미지만 덩그러니 넣지 말아라. 그런건 아무나 할 수 있다.

이 경우 프로덕션 프로젝트가 아니라면, 커스텀 도메인이나 https지원 등은 하지않아도 상관없다.

6. Be Selective of Projects
많은 사이드프로젝트를 했더라도 투두리스트같은 당신이 한 모든 프로젝트를 나열하지 말아라.

3~6개의 최고 프로젝트만 선택해서 넣어라. 2개의 퀄리티있고 큰 프로젝트가 10개의 투두리스트보다 훨씬 우수하다.

즉, 양보단 질이다.

7. Customize Course Projects
강의나 튜토리얼을 따라해서 프로젝트를 했다면 절대 그대로 넣지말아라. 반드시 자신 나름대로 커스터마이징 해라.

유명한 튜토리얼들은 이미 모든 사람들이 알고있어서 평가자는 이미 똑같은 결과물을 많이 보았을 것이다.

8. Easy Contact
인사담당자가 당신에게 연락하기 쉽게하라.

이메일, 핸드폰번호 같은 연락처를 Navigation bar, About page, Contact section 등 잘보이는 곳에 써 놓아라.

9. Web Presence & Brand
자신을 브랜딩할 수 있는 수단을 넣어라.

유튜브를 한다면 유튜브 채널, 글을 쓴다면 블로그 주소나 미디엄 주소, 깃허브 주소, SNS주소 등

본인 사진이든 로고든, 여러 다른 플랫폼에 비슷하거나 같은 프로필 이미지를 사용해라. 그게 싫다면 primary color라도 일관되게 하라.

10. Be Yourself
가장 똑똑한 사람이 되려고하지 말아라. 똑똑해보이려고 애쓰지 말아라.

그냥 솔직하게 자신을 표현해라.

당신의 열정, 취미, 특기 등 당신을 표현할 수 있는 다른 것들을 넣어도 좋지만, Keep it Simple!
====================================
회사는 신입 프로그래머에게 어떤 수준을 기대하나요?
안녕하세요. 지방 공립대학교 컴퓨터 학부 2학년에 재학 중인 학생입니다. 저는 미래에 IT 직종에 종사하고 싶습니다. 

꼭 가고 싶은 기업 중 한 곳인 N IT 회사에 근무 중이신 분을 찾다가 잇다에서 멘토님을 발견했습니다. 멘토님이 평소 올려두신 글을 보며 궁금했던 점들이 많이 해소됐습니다. 여기에 더해 취업 준비과정과 근무 중 회사 생활에 관해 여쭙고 싶습니다. 

ⒸShotPrime Studio

1. N 기업 취업 시 필요한 스펙과 준비 사항이 궁금합니다. 어학 점수나 학점은 어느 정도 되어야 하며 이것들이 취업 시 얼마나 작용하는지 알고 싶습니다.

공모전 수상 성적과 포트폴리오가 있다면 좋다는데, 어느 수준으로 갖춰야 할까요? 또한, 코딩 테스트의 난이도는 학부수준의 자료 구조/알고리즘 정도인가요? 

2. 직종 고민을 하고 있지만, 개발자 쪽을 우선적으로 생각하고 있습니다. IT 기업 취업 시 프로그래밍 능력 같은 전공 관련 능력을 가장 많이 본다고 생각하는데 취업 시 어느 정도로 필요할까요?

특히 프로그래밍 능력을 어느 수준으로 갖춰야 할지 궁금합니다. C, JAVA, Python, C++, 등 프로그래밍 언어가 많은데 몇 가지를 알아두는 게 좋을까요?  
3. 멘토님은 석사 학위를 취득하셨는데, 취업 후 석사 과정이 많이 도움되었는지 궁금합니다. 저는 학사 졸업 후 바로 취업할까 생각 중인데, 석사 과정도 매력적으로 보여서 여쭤봅니다.  

4. 취업에 도움될 수준의 프로그래밍 능력을 어떻게 키울 수 있을까요? 저는 프로그래밍을 즐기면서 하기엔 능력이 부족해서인지 스트레스를 많이 받습니다. 팀 프로젝트를 하기엔 주변에서 같이 할 사람을 찾기가 어려운 상황입니다.

5. N 기업의 복지가 어떤지 궁금합니다. 아직도 야근이 잦고 업무량이 많나요? 또한, 사내 복지에 만족하시는지 궁금합니다.

질문이 너무 많아 불편하게 한 것은 아닌가 염려됩니다. 멘토님 덕에 이미 많은 정보를 얻었지만, 더 궁금한 게 많아 질문 드렸습니다. 

저도 미래에 꼭 N 사에 입사하고 싶습니다. 지금까지 긴 글 읽어주셔서 감사합니다. 

이세린 멘토의 답변

멘티님 안녕하세요? 2학년부터 취업과 진로를 진지하게 고민하는 모습이 정말 보기 좋습니다. 질문 주신 내용에 하나씩 답변할게요.

ⒸSkitterphoto
포트폴리오, 선택문항이라도 제출하는 게 좋다
답변에 앞서  N 기업의 예전 하반기 공채 서류 문항을 먼저 공개할게요.

[필수문항] 희망하는 개발 분야 또는 관심 있는 기술 분야를 기입해주세요.

[필수문항] SW 개발에 대한 자신의 열정을 보여줄 수 있는 활동사항. (프로젝트, 경진대회, 창업 및 오픈소스 코드 사이트 Github, Bitbucket ID 등) 작성 시 '본인이 주도적으로 참여한 부분' 위주로 기입하며, 진행기간/주요 내용/본인이 공헌한 점/사용한 Skill 또는 지식/결과, 성과를 핵심만 기술하세요.

[필수문항] 본인이 보유한 Programming Skill의 활용 정도를 모두 적어주세요 

예시 : ① C - 2 ② Java - 2 ③ Linux 커맨드 및 개발환경 - 1 ④ Shell Scripting - 0 ⑤ Android - 2

4: 대규모 프로그램 및 시스템을 참고사항(책/인터넷)없이 개발할 수 있으며, 일반적이지 않은 난해한 부분도 일부 참고를 통해 개발할 수 있음 

3: 중간규모 프로그램 및 시스템을 개발할 수 있으며, 주요 이슈 트러블슈팅을 할 수 있을 정도로 내부구조를 이해하고 있음 

2: 시스템 동작 방식을 알고 있으며, 기본적인 기능을 구현할 수 있음 

1: 코드를 읽을 수 있으며, 책을 참고하여 약간의 수정작업 또는 작은 변경사항 추가를 할 수 있음 

0: 경험/지식 없음

[선택문항] 포트폴리오가 있다면 제출해주세요

보면 알겠지만, 글을 길게 쓸 곳도 없고 다른 스펙을 적을 공간도 없습니다. 시간이 많이 흘러서 현재는 조금 다를 수도 있지만, 기본적으로 N 사가 추구하는 가치는 달라지지 않았다고 생각합니다. 

ⒸJARIRIYAWAT

즉, N사는 학교/학점/어학점수/자격증 같은 것보다는 개발자를 채용하는 만큼 프로그래밍 경험과 실력을 중요하게 여깁니다.

공모전 수상은 프로그래밍 경험과 실력 향상에 밑거름이 된 성과니 있으면 좋습니다. 그러나 대학교 수준의 공모전 수상은 그 이상의 가치는 없습니다. 참고로 저는 취업 전에 공모전에 나가본 적이 없었습니다.

포트폴리오는 무척 중요합니다. 선택 문항이라고 기재되어 있지만 사실상 제출하지 않으면 합격에서 멀어진다고 보면 됩니다. 
서류 필수 문항이 매우 간단해서 표현할 수 있는 내용에 한계가 있기에, 자신이 어필할만한 것이 있다면 당연히 포트폴리오를 제출해야겠죠. 

포트폴리오의 수준은 글쎄요. 대학교 졸업생 수준 이상을 요구하지는 않습니다. 당시 저는 석사 졸업생으로 지원해서 대학원에서 연구했던 내용을 모두 포트폴리오에 담았습니다. 

A4 기준 10장 정도로 연구 목적과 성과 그리고 실제 연구하며 작성한 소스코드 일부와 그에 대한 설명을 담았습니다. 포트폴리오는 학교 과제를 포함해 멘티님이 경험한 프로젝트 중 가장 임팩트 있는 것을 5개 이하로 골라 구성하면 좋을 것 같습니다. 

Ⓒmath
코딩 테스트 난이도는 멘티님 말처럼 학부 수준의 자료구조와 알고리즘을 안다면 풀 수 있는 문제로 구성되어있습니다. 수업에서 배운 내용에서 크게 벗어나지 않는 질문부터 그 기초지식을 가지고 있다면 충분히 응용할 수 있는 문제들까지 나옵니다. 

제가 기억나는 것들은 '이진트리 클래스 구조를 화이트보드에 작성해주세요', '트리 구조에서 주어진 값을 찾는 코드를 작성해주세요', '주어진 문자열에서 중복된 문자열을 찾는 프로그램을 작성해주세요' 같은 문제들이네요. 

N 기업 취업 시 준비해야 하는 것은 다음 문항에서 설명할 ‘개발자가 되기 위한 기초 지식과 프로그래밍 경험 및 실력’이라고 생각합니다. 

프로그래밍 언어, 많이 아는 것보단 깊이 있게
IT 기업에서 요구하는 핵심 전공지식은 개발자의 필수 기초지식입니다. 여기서 핵심 전공지식이란 C 또는 Java 계열의 기초프로그래밍 지식/자료구조/알고리즘/데이터베이스/ 운영체제/네트워크입니다. 이런 지식을 학부 수준으로 갖추고 면접 때 기초 지식 문제를 물을 때 잘 답변할 수 있는 정도면 됩니다. 

프로그래밍의 경우 학교에서 배운 알고리즘을 참고문서 없이 프로그래밍할 수 있는 실력 정도면 충분합니다. 언어의 수도 마찬가지이고요.

ⒸMonstar Studio



개발자가 프로그래밍 언어를 많이 안다면 당연히 유리하겠지만, 꼭 많이 알아야하는 것은 아닙니다. 프로그래밍 언어는 개발자가 프로그래밍할 때 사용하는 하나의 도구일 뿐이고, 그 도구는 용도에 그때그때 맞게 사용하면 됩니다. 

프로그래밍 언어라는 것이 계속 생겨나기도 하고 더는 사용되지 않기도 해서, 여러 언어를 아는 것보다는 학교에서 배운 몇 가지 언어를 아는 상태에서 C나 Java 계열 언어 하나를 조금 더 깊게 아는 것이 좋습니다. 언어 하나를 제대로 하는 개발자가 다른 언어도 빨리 배우고 활용할 수 있기 때문이죠. 

현업에서 사용하는 프로그래밍 언어의 개수와 능력에 관해선 제 경험을 들어 설명하겠습니다.

저는 학교에서 배운 C++, Java와 몇 가지 초보적인 수준의 언어, 인턴과정을 통해 알게 된 PHP와 Scala를 약간 알았습니다. 그리고 현재는 C++, Java는 물론이고 배운 적 없는 python 등의 언어를 포함해 총 약 7개의 언어를 사용해서 프로그래밍합니다. 

다들 현업에서 5개 언어 이상을 사용하는 것은 아니나 이런 경우도 있다는 것만 알면 될 것 같습니다. 업무에서 필요한 프로그래밍 수준은 매우 잘해야 하는 것에서부터 잘은 모르지만 간단히 사용할 수 있는 정도 등 다양합니다. 

현업에서도 새로운 언어가 필요하면 공부하기도 하고 많이 중요하지 않으면 간단한 문법만 배워서 사용하기도 합니다.


ⒸGratisography


나의 지향점을 파악하고 석사진학 결정하자
취업 시 석사과정이 크게 도움되는지 묻는다면. 그렇지 않다고 답하겠습니다. 연구직처럼 특별히 학위가 필요한 직무를 원하거나 특정 분야를 전문적으로 공부하면서 본인과 잘 맞고 훌륭한 교수님 연구실로 가고 싶은 것이 아니라면 석사과정을 밟지 말라고 말하고 싶습니다.  

저는 두 번째 이유로 석사과정을 했으며, 결론적으로 현재 연구 개발 업무를 하고 있습니다. 
석사 취업의 장점은 아래 두가지 입니다.

석사 과정동안 자신의 능력치를 쌓을 수 있다. 
연구직으로 취업할 수 있다.

저는 대학에서 학점을 위한 공부만 했었기에 컴퓨터 공학을 진정 더 공부하고 싶었고, 석사과정 2년 동안 짧게나마 제대로 공부했다고 느꼈습니다. 그리고 제가 취업할 수 있었던 이유도 석사 과정 동안 쌓은 제 실력 덕분이라고 생각합니다. 

제가 들어온 조직은 머신러닝을 이용한 서비스를 개발하는 조직으로, 석사 이상의 신입만 뽑는 조직이었기에 제가 석사학위를 취득하지 않았다면 현재 만족하는 이 조직에 들어올 수 없었을 겁니다. 

멘티님은 대학 졸업 후 취업을 생각하고 있으니 우선 원하는 분야나 개발 직무를 더 조사해보고, 해당 분야에 꼭 석사 학위가 필요하지 않다면 진학하지 않는 것을 추천합니다. 석사의 길을 잘못 택했다가 분야 또는 교수님과 맞지 않아 오히려 시간을 낭비할 수도 있습니다. 

Ⓒaustris augusts



무조건 많이 해봐야 프로그래밍 실력이 는다
프로그래밍할 때 스트레스를 많이 받는다고 했는데, 그것이 프로그래밍 자체나 버그로 인한 스트레스인지 아니면 다른 사람들보다 잘 하지 못한다고 느낀 것에서 비롯된 스트레스인지 구분해 볼 필요가 있습니다. 

만약 프로그래밍 자체나 버그로 인한 스트레스라면 사실 개발 직무와 잘 맞지 않을 수도 있습니다. 그러나 프로그래밍은 괜찮은데 잘 못하는 것 같다는 생각 때문에 그렇다면 그건 정상적인 감정입니다. 물론 세상엔 너무나 훌륭한 개발자가 많기에 앞으로 멘탈 관리에 특히 신경 써야 합니다. 

글에서 프로그래밍을 같이 할 사람을 찾기 힘들다고 말했는데요, 저도 무척 공감합니다. 저도 대학교 때 함께 할 친구를 찾지 못해서 공모전이나 대회는커녕 개인 프로젝트도 제대로 하기가 어려웠습니다.

이에 대해서는 2가지 해결책이 있습니다. 하나는 혼자 하는 것, 그리고 다른 하나는 온라인으로 연결된 사람들과 함께 개발하는 것입니다. 

학생 때까지는 혼자 개발하는 게 가능합니다. 저도 여기에 속했고요. 혼자 하고 싶은 개발을 해보거나 혼자 도전할 수 있는 것들로 개발 경험을 쌓으면 됩니다. 

그러나 혼자 하는 게 어렵고 지루하다면 github의 오픈 소스 코드를 공부하면서 조금씩 참여하거나 여러 커뮤니티 또는 온라인 스터디그룹에 참여하여 함께 개발하는 방법도 있습니다.


Ⓒrayi christian wicaksono



결론적으로 프로그래밍 실력을 쌓으려면 프로그래밍을 많이 해야 하므로 개발할만한 재료가 필요합니다. 그것은 공모전이나 프로젝트가 될 수 있고 또 과제가 될 수 있으며 교재의 연습 문제나 이론이 될 수도 있습니다. 혹은 알고리즘 프로그래밍을 연습하기 좋은 알고리즘 문제 풀이를 통해서도 실력을 쌓을 수 있습니다. 

백준 알고리즘, leetcode, algospot 등 알고리즘 문제풀이 사이트가 많이 있으니 이런 문제들을 풀어보고 또 다른 사람들의 코드를 보다 보면 프로그래밍 실력이 자연스레 쌓이는 것을 느낄 수 있을 겁니다. 

N사 개발자, 자유도는 높지만 24시간 상비군
여기에 다 기재하기엔 부족할 정도로 N 기업의 복지는 정말 다양하고 세세합니다. 그런 것들보다는 N 기업의 대표적인 문화이자 개인적으로 만족도가 높다고 느낀 요소를 알려주겠습니다. 

업무 시간과 업무량의 경우, 2018년 노동법이 개정되기 전에는 기본적으로 책임근무제를 채택했습니다. 책임 근무제란 출퇴근 시간이 없는, 말 그대로 자기 일만 책임진다면 마음대로 근무할 수 있는 제도입니다. 

채워야하는 시간도 없고 근무를 꼭 회사에서만 해야 하는 것은 아니었기에 자유도가 매우 높으며 그에 따른 책임감이 따르는 문화였습니다. 

그러나 노동법 개정 이후 현재 매달 주 평균 40시간을 넘으면 야근 수당이 나오고 52시간을 넘으면 안 된다는 제약이 생겼습니다. 그리고 최소 시간은 매달 주 평균 15시간으로, 하루 평균으로 따지면 3시간입니다. 

Ⓒchuttersnap
따라서 회사의 방침도 이제는 매달 주 평균 15시간 이상 일해야 한다는 제약이 생겼고 기본적으로 40시간을 근무하도록 하는 문화가 생겨났습니다. 

물론 조직에 따라 약간은 다르지만, 최소시간과 권장시간만 생겼기에 여전히 출퇴근 시간은 자유고 일이 있으면 근무 중에도 아무 결재 없이 외출할 수 있습니다.

반면 업무량이 적다고 할 수는 없습니다. 저는 심심하지 않으며 제가 감당할 수 있는 만큼의 업무량이라고 느낍니다. 하지만 이것도 조직이나 개인마다 차이가 있을 수 있습니다. 

추가로 N 사의 서비스들이 모두 24시간 운영되기에 집이나 휴가지에서 자다가도 일어나서 장애 대응을 해야 한다는 특성이 있습니다.

다른 복지로는 맛있고 저렴한 회사 식당과 무료 조식 자판기, 휴가 자기결재 시스템으로 당일에도 휴가를 낼 수 있는 문화, 근무 2년마다 휴가 가면 돈을 더 주는 리프레시 휴가, 회사 어린이집, 직원들 스터디 교재 지원 등이 있습니다. 

모든 질문에 답하다 보니 답변이 디테일 하지 않을 수도 있습니다. 더 궁금한 점이 있다면 질문하기를 통해 언제든 더 물어보세요. 

취업이 걱정되겠지만, 우선 하고 싶은 것을 모두 해보며 즐겁게 대학생활 하기를 바랍니다. 