#1-1 Why JS? : JS for Beginners
좋아. 첫번째로 질문에 답을 먼저 해볼까?
JavaScript는 무엇이냐는 질문이야
JavaScript는 웹에 쓰이는 하나뿐인 프로그래밍 언어야.
하나뿐이라고 하는 이유는, 옵션이 하나뿐이기 때문이야!
웹에서 웹사이트를 만들고 싶을 때
그리고 그 웹사이트를 interactive 로 만들고 싶을 때
쓸 수 있는것이 JavaScript야.
만약 너가 Backend일을 한다고 하면
다른 언어에 대한 옵션은 많지.
Backend로 쓸 수 있는 언어는 Python이나 Ruby도 쓸 수 있고 말이야
그 외에도 하스켈이나 ASP도 쓸 수 있지.
그리고 Java가 가능하지.
근데 만약 Frontend 일을 한다고 하면 쓸 수 있는 언어는 하나뿐이야.
그리고 그 언어가 JavaScript라는거야!
자, 그럼
그것이 Frontend 일을 하는, 장점이기도 하고 단점이기도해.
좋은 이유는 Fragmentation이 없기 때문이야
웹사이트를 하는 사람들은 모두 JavaScript를 알지.
그래서 모두 같은 언어로 얘기를 할 수 있어.
문제는 사람들이 이따금씩 JavaScript를 싫어해
JavaScript에 별로 좋지 않은 부분들이 가끔 나오거든
그리고 우리는 JavaScript에 갇히기도 하지.
우리가 할 수 있는게 없을 때가 있어. 바꿀수도 없고, 업데이트도 할 수 없고, 그리고 또
우리가 원하는 것으로 교체할 수도 없어.
그게 문제라면 문제일 수 있어.
그래도 좋은 뉴스는
JavaScript가 웹에서 쓸 수 있는 하나뿐인 언어라서....
그리고 웹은 계속 빠르게 발전하기 때문에
JavaScript도 빠르게 발전한다는 거야.
덕분에 막강해지는거고
그리고 영향력이 커지고 있지.
무슨 뜻이냐면 JavaScript를 할 줄 아는 Developer들은
할 수 있는 일이 점점 더 늘어난다는거야
예를 들면 90년대에 JavaScript는 Effects를 넣어줄 용도로 만들어졌어
예를 들면 웹사이트에 클릭하는 효과 같은걸 위해서 말이야. 여길 클릭하면
이게 실행이 되고, 제출을 하면
이런게 실행이 되고 하는 효과 말이야.
X버튼을 누르는 그런 이벤트.
JavaScript는 이런 자잘한 이벤트들을 두개 이상 진행 할 수 있게 도와주는 역할을 했었어.
그렇지만 웹이 성장하기 시작하면서
우린 보다 많은 것들을 실행해야했지.
그래서 JavaScript로 할 수 있는 것들을 더 많이 만들어낸 거야
그렇게 JavaScript는 영향력이 강해졌지.
이 섹션의 요지는
JavaScript를 이용해서 얼마나 많은 것들을 해낼 수 있는지 보여주는거야
이미 말했지만 왜 사람들이 이걸 싫어하는지
왜 사람들이 이걸 좋아하는지 보여줄거야
그리고 왜 이 언어가 너의 시간을 투자할 가치가 있는지도 알려줄게.
간단한 도입설명으로
JavaScript를 배우면 매우 섹시한 웹사이트를 만들 수 있고
섹시한 웹 앱도 만들어 낼 수 있어.
섹시한 모바일 어플리케이션도.
Native application들이랑 비디오 게임도 만들 수 있지.
그리고 조금 더 욕심을 내면 데스크톱 앱도 만들 수 있어.
엄청 놀랍지.
만약 니가 VS Code 같은것을 이용하거나
아니면
이게 VS Code인데 이걸 사용하는 이유가...
아니면 Atom을 사용하면
그 말은 JS 로 만들어진 데스크톱 어플리케이션을 쓰고 있다는 얘기야.
그리고 그건 아주 멋있는거지.
어찌되었든 이러한 예시들도 다음 영상에서 볼거야
일단 지금은 왜 프론트엔드에서 JavaScript를 사용하는지에 대한 것이었고...
왜냐. 만들고. 다른 언어로 교체하지 않았기 때문.
그리고 전 세계에 있는 컴퓨터들이 이 언어를 쓰기 시작했고...
왜 전세계에 있냐고? 모든 컴퓨터에는 브라우져가 있으니까.
브라우져는 JavaScript로 돌아가고..
모든 컴퓨터에는 브라우져가 있고.
즉, 모든 컴퓨터에는 JavaScript가 깔려있다는거지.
모든 컴퓨터가 이 언어를 이해한다는거고.
이게... 멋있는거지.
이번 영상은 여기까지야. 다음 영상에서는 예시들을 보여줄게.
다음 영상에서 만나. Bye bye!

#1-2 Super Powers of JS
좋아. 네가 내 강의를 봤다면 알겠지만
나는 JavaScript를 좋아하고, 항상 내 무료 강의와 캠프에서 예시를 JavaScript로 보여줬어.
예시로 JavaScript가 얼마나 강력한지 보여주도록 할게.
첫번째로 할 건... 여기 웹사이트를 보여줄게.
예를 들어 JavaScript를 사용하면 내 위치를 가져올 수 있어.
그리고 내 위치의 날씨도 가져올 수 있지. 아주 멋져.
또한...
또 뭘 할 수 있을까?
보자. 할일목록을 저장할 수 있어.
그래서 내가 이 페이지를 새로고침 하면, 내 할일목록이 저장이 되어있지.
이게 너가 JavaScript로 할 수 있는 간단한 것들이야
조금 더 신나는 건 뭐가 있을까, Real time (실시간)을 만들 수 있지.
예를 들어보면.. (화면과 같이 입력)
보이는 것처럼 신기한 것들을 Real time으로 할 수 있어.
즉, 실시간 채팅 같은 것이지...
어디 있지..
Demo, 한번 볼까
이런 Chat을 만들 수 있는거야.
화면과 같이 입력
누가 답장을 주는지 한번 볼게
아마 답장으로 욕설을 하지 않을까 싶지만.
일단 기다려보자구 ㅎㅎㅎ
휴대폰에서도 작동하는 앱을 만들어 볼수도 있어
이 말은 너의 앱을 만들어서.. 앱스토어에 전송을 할 수도 있다는 얘기야.
그리고 다운을 받을 수도 있지. 내가 만든 데모 앱이 있는데 Nomad Movies라는 앱이야
Google play store에 있어.
애플에서는 승인을 못받았어
이 앱을 한번 다운받아보도록 해, 왜냐면 이 앱은 100% JavaScript로 만들었거든
그리고 이 앱은 Native야.
이게 앱스토어에 있고 다운로드가 가능하다는 얘기지.
엄청 멋지지.
비디오게임 같은 것들도 리얼타임으로 만들어 볼 수 있어.
한번 보여줄게...
여기 있다
Games로 들어가보면..
그리고 이런 것들도 만들 수 있는데..
이런 것들 말이야.
이걸 한번 보자, 이건 내가 좋아하는거야.
World draw라는건데
구글에서 만들어졌어.
여기에 이런식으로 그림을 그리면
이렇게 말이야
그러면 AI가 이 그림이 텐트 같다고 알려줄거야
이번엔 AI가 알아차리기 어려운 그림을 그려볼게
그럼 이게 AI가 이 그림이 어떤거에 가까운지 알려줄거야
우산같다고 하네
이것봐, 이렇게 3D로 우산을 만들어주네.
이건 전부 JavaScript로 한거야, 전부.
크게, 작게 조절 할 수도 있어.
우산을 빨간색으로 변경할 수도 있고
여기 Go라는 버튼을 누르면
Backend의 Server와 소통해서
물론 그 서버도 JavaScript로 만들 수 있어
이 우산을 세계 어딘가에 둘 수 있지.
이걸 보면 무슨말인지 알거야.
이게 로딩이 끝나면 말이야
이게 로딩되길 기다리는 동안
impact JS를 보여줄게
Impact JS는 frame work 또는 library 같은거야.
JavaScript 게임들을 이렇게 만들기 위해서는
이건 전부 개발자들에 의해 만들어진 게임들이야.
내 생각에 이건 진짜 멋진 것 같아. 이걸 한번 클릭해볼게.
Under water diving assets 라는 게임이네, 한번 보자.
Enter를 누르고
다시 Enter
이거봐, 너희도 당연히 이런 이미지를 만들 수 있어.
이거봐, 멋지다.
이건 전부 JavaScript로 만들어진거야
HTML만 알면
이런 웹사이트를 만들 수 있어.
CSS를 알면 센터에 이걸 고정시킬 수 있고.
그리고 JavaScript를 알면 이 캐릭터를 움직일 수 있게 되지.
완전 멋지지.
여기에 무슨일이 생긴건지 모르겠어.
자리를 찾는 중
기다리는 동안 뭘 하면 좋을까
Tao Tajima 이건 뭔지 모르겠네
이거랑 이걸 클릭해서 뭔지 확인해보자.
이런 안돼.
되게 어두운 분위기네
우산은 아직도 로딩중이고
더이상 여기 있고싶지 않다
게임 설명 읽는중
즐거운 게임인줄 알았는데 아닌거지 이런.
왜 내 우산을 둘 자리가 이세상에 없는거니
좋아.
이 화면이 날 공포에 휩싸이게 하고있어
이건 뭐야.
이거 보여? 오.. 이런
게임 플레이중 (뭔가 호러게임인듯.....)
음. 잘가. (빠염)
다시 한번 볼까.
그냥 세계탐험이나 해보자
이게 어떤걸 보여주냐면, 보이는 것처럼 3D세상이야.
여길 클릭하면
누가 이.. 이 집을 만들었는지 알려주는거야.
자, 여길 누르면 누가 이 집을 만들었는지 알려주는거야.
여기는 아무것도 아니고, 이 차는 누군가 시카고에서 만들었대.
여길 눌러볼까.
이 집은 암스테르담에 사는 사람이 만들었대.
멋진데.
다시 한번 더 그려볼까
JavaScript의 힘을 보여주고 싶거든.
이렇게 그리고 어떤 옵션이 나오는지 볼까.
이건 빌딩이라고 나오는구나
놀라운데, 이거 맘에 들어.
빌딩색을 바꿔주고, 다시 한번 말하지만 전부 JavaScript로 가능한거야.
기다리는 동안 이걸 보자.
이건 그냥 웹사이트인데 JavaScript 덕분인지
클릭할때마다 이미지를 신기하게 변형시키고 있어.
봤어? 엄청 심플하게 만들었지만 심심하지는 않아보이지?
이건 어려운 작업이 아냐.
플레이 버튼을 누르면 비디오를 볼 수 있지.
이 웹사이트 이름이 뭐였지. 사이트가 엄청 interactive 하네. 멋있다.
이거 봐.
JavaScript는 웹사이트를 만드는 용도만으로 사용되지 않아.
이건 바보같은 것만을 만드는데에 이용되지 않는거지.
이런 걸 만들때도 쓰라고 있는거야.
Interactive한 것들을 만들어보고 싶다면
게임을 interactive하게 만들어보고 싶다면
앱을 interactive 하게 만들고 싶다면
JavaScript가 너에게 도움이 될거야.
그만큼 영향력이 강한 언어라는거지.
그래서 내가 이 언어를 고른거고, 좋아하는 이유야.
이 언어를 전문성을 위해 고른 이유이기도 하고.
그래야 어떤걸 함에 있어서 선택범위가 넓어지니까.
별로 유명하지 않은 언어를 고를때는
선택범위가 좁아지지.
예를 들면
무슨 언어를 예로 들어야할까... Ruby를 골랐다고 가정해보자.
Ruby만으로는 특별할 것이 없어.
그냥 Backend의 일부일 뿐이지.
또 어디에 쓰일 수 있는지를 모르겠네.
세상에 JavaScript를 대체할 언어는 없어.
JavaScript는 심플하게 쓰이기도 하고
웹사이트에서.. 앱이나 비디오게임을 만들 때 쓰이기도 하지.
리얼타임 앱을 만드는데에 쓰이기도 하고.
이 채팅창에서는 아무도 답장이 없네.
왜 아무도 말이 없니?
아무도 나랑 대화를 원치 않나봐
다음 영상에서 만나야 한다는 얘기야.
바이 바이!

#1-3 ES5, ES6 ES....WTF!?!?!
자 이제 JavaScript의 Versions라는 부분으로 넘어가보자
내 생각엔 아마..
너희가 ES5, ES6를 들어본 적이 있을 것 같아.
음...
여기 ES5, ES6를 포함해서 ES가 굉장히 많네.
ES. Next까지 있네, 놀랍다
음...
너희가 알아야 하는 한가지는 JavaScript에
ECMAScript라는 것이 있는데
Specification의 명칭 같은거야.
뭔지 알지?
ES5는 ECMAScript5와 동일해.
ES6는 ECMAScript6 인거고 등등등
이건 그냥 Specification에 대한 업데이트야.
그럼 Specification이 뭘까?
JavaScript 는 꽤나 중앙 집중화 되어있어서....
누군가 업데이트를 하면 모든 브라우져에서 작동을 하게 됨!
JavaScript는 Specification인데
체계 매뉴얼 같은거지.
안내책자 같은거 말이야.
이걸 읽고 이대로하면 컴퓨터가 이렇게 작동합니다 와 같은
이런걸 적으면 브라우져는 이렇게 나와야 합니다 같은
만약 다른내용을 적으면 브라우져는 에러를 띄워야 합니다 같은걸 알려주는거야.
이런게 Specification이야. 설명문 같은거야!
많은 사람들에게 검증 받은.
이게 ECMAScript Specification에 대한 설명이야.
자, 브라우져는 무슨 일을 하냐면
구글 크롬이랑
Firefox도 그렇고
익스플로러도
이 Specification을 받아서 자기들 방식으로 실행 하는거야.
같은 결과를 이루려고 노력하는데
그걸 각자의 방식으로 하는거지.
ES5랑 ES6같은 경우는 그냥 Specification의 버젼을 나타내 주는거야.
예를 들면
구글 크롬은 ES6를 지원한다고 하면
그 말은 구글 크롬 개발자들이 새로운 Specification을 시행했다고 볼 수 있는거야.
새로운 안내문을 발행한 것과 같은거야.
이번 영상에서 우리가 다루는 것은
ES5, ES6, ES2016 등등 각각의 기능을 보는게 아니야.
우리는 그냥 일반적인 JavaScript에 대해 배울거야.
그래서 어떤 버젼의 ES를 배울지 걱정하지 않아도 돼.
왜냐면 나는 너희에게 구식의 정보를 알려주진 않을거거든.
알겠지? 너희에게는 그런 정보들이 지금 필요가 없어.
ES5, ES6, ES4가 각각 뭔지는 너희에게 중요하지 않아.
좋아, 우리는 이런 방식으로 수업을 할거야.
우리는 버젼 같은 건 들여다보지말자.
자! 우리의 컨셉을 생각하고
그 컨셉을 배우면 돼. 너희들에게 약속할게! 구식의 정보는 알려주지 않을거야. 그냥 나를 믿어!
버전은 걱정하지 말고, 알았지?
가끔 사람들이 묻는 질문 중에
JavaScript랑 ES6중 어떤걸 먼저 배워야 할까 라는 질문이 있는데
ES5를 해야할까 아니면 바닐라 자바스크립트를 배워야 할까?
버젼이랑 어떤 걸 배워야할지 걱정하지 마!
그냥 나한테 JavaScript를 배워
그럼 다 괜찮아질거야.
조금 전에 바닐라 자바스크립트를 얘기했는데
혹시 이게 뭔지 모를까봐 설명해주자면
바닐라 자바스크립트는 JavaScript의 한 종류로 Library 없는 것을 얘기해.
알겠지? 화장이 없는 JavaScript인거지.
도움이 없는 JavaScript고.
조리가 되지 않은 날 것의 JavaScript 말이야.
그게 바로 바닐라 자바스크립트야.
자, 다음 영상에서는 왜 우리가 바닐라 자바스크립트를 배워야 하는지.
왜 너희가 이쪽으로 프로가 되어야 한다고 생각하는지
이걸 배우고나면 나중에...
화장이랑 도움이 추가된 JavaScript를 할 수 있게 될거야.
Library나 Framework가 추가된.
지금은 얘기하기엔 너무 이르고
그냥 지금은 JavaScript는 언어, ECMAScript는 Specification라고만 알아두면 좋겠어.
바닐라는 이제 다음 영상에서 배울거고.
그럼 다음 영상에서 만나 Bye bye!

#1-4 VanillaJS
자, 오늘 우리는 JavaScript가 굉장히 못생겼다는 걸 실감하게 될거야.
왜냐면 이 언어가 오래되었기 때문에 어느 부분에서는 그럴 수 있어.
그리고 업데이트를 할 수 없는 오래된 것의 경우
임시방편으로 떼워야 하는 경우가 있지.
예를 들어서 JavaScript를 쓰는 많은 웹사이트들이 있어.
그렇지만 그 중 몇은 엄청 오래된 버젼의 JavaScript를 쓸거고
우린 그걸 전부 업데이트 해줄 수 없기 때문에
JavaScript를 180도 다르거나 모던하게 바꿔줄 수 없어.
만약 그럴경우 엄청나게 많은 인터넷 사이트들이 망가질거야. (엑박이 뜨는거지)
그리고 우린 그런 일이 일어나길 원치 않고.
바닐라 자바스크립트는 브라우저를 통해 너희에게 제공된 JavaScript라고 보면 돼.
온갖 임시방편과 지저분한 것들
항상 사람들이 바닐라 자바스크립트에 대해 언급하는 것들이지.
어떤 사람들은 바닐라 자바스크립트를 사용하지 않고
커피스크립트 같은걸 배우지
좀 섹시한 버젼의 JavaScript 말이야.
어떤 사람들은 JavaScript를 엄청 현대적으로 바꾸는 법을 배우기도 하고
몇몇은 JavaScript를 묶어내는 걸 사용하기도 해.
예를 들어서 누군가가 매우 현대적이지만 지지받지 못한 JavaScript를 만들었어.
그리고 이걸 compiler 안에 실행시켰어
일단 명칭 자체는 신경쓰지말고
그냥 여기 코드를 상자안에 넣었다고 상상해봐.
그리고 그 박스가 컴파일된 JavaScript를 전부 모든 브라우져에 뱉어내는거야.
섹시한 JavaScript를 만들었지만
결국 받게되는건 컴파일된 못생긴 JavaScript인거야.
그리고 이게 이따금씩 문제가 되는데
왜냐면 JavaScript에 재능을 가진 사람을 찾는게 매우 어려운 일이거든.
많은 사람들이 Library랑 Framework를 알고있을거야.
이전 비디오에서 얘기했듯이 Library나 Framework는 메이크업, 화장 같은 존재야.
JavaScript를 원래 모습보다 조금 더 예쁘게 만들어주는거라 배우기 쉬워.
사람들은 어려운 바닐라 자바스크립트는 잘 몰라.
그래서 내 생각에는 이걸 처음에 배워두는게 좋을 것 같아.
바닐라 자바스크립트를 쓰는게 능숙해질 때 다음으로 넘어가는거지.
왜그런가?
전에도 말했듯이 JavaScript에 진짜 JavaScript에 재능이 있는 사람을 찾을 수가 없어.
리액트나 Jquery를 아는 사람들을 찾기 쉬워.
Library를 다룰줄 알거나 Framework에 대한 전문가들은 찾기 쉽지.
이런 사람들은 Framework에서만 전문가야.
실제 필드에서는 실력발휘를 못하는거야.
만약 포토샵을 예시로 알려준다면
포토샵으로 예시를 들어서 알려줄게.
여기서 얘기하는 포토샵은
포토샵을 잘 다룰줄 아는 사람이랑 동등한거야.
소프트웨어를 잘 다루는거지.
그렇지만 사진은 잘 못 찍는사람.
예를 들자면 그런거야.
기구는 사용할 수 있지만 핵심은 모르는 사람.
다른 예시! 포토샵을 잘 다루는데
색감에 대한 센스가 없는 사람이라고 생각해봐!
색의 구성에대해 아무것도 모르고, 멋진 사진이 뭔지 감각이 없는 사람.
색상에 대한 이해도가 낮고,
사진의 퀄리티에 대한 기준이 없는사람. 이게 더 정확한 예시가 될 수 있겠어.
이게 바로 JavaScript를 제대로 모르고 사용하는 사람에 대한 설명이야.
그리고 바닐라 자바스크립트에 재능이 있는 사람을 발견하기 어려운 이유이기도 하고.
그래서 나는 너희가 이걸 배우면 좋을 것 같아.
화면에 보이는것처럼 바닐라 자바스크립트 웹사이트가 있어.
이건 패러디 웹사이트야. 바닐라 자바스크립트가 빠른 Framework라고 설명하거든.
그리고 이게 페이스북, 구글, 유투브, 야후, 위키피디아 같은 온갖 유명한 곳들에 쓰인다고 되어있어.
어떻게보면 사실이지, 이건 JavaScript중 하나고 다들 JavaScript를 이용해야 할테니.
그리고 여기에 보면 바닐라 자바스크립트를 이용해보고 싶니?
그럼 너에게 꼭 필요한 이걸 고르도록 해 라고 되어있어.
그래야 각종 바닐라JS를 원하는대로 꾸밀 수 있으니까.
그리고 또 원하는걸 고를 수 있어. 난 이거랑
이거.
이것도
다 하고 싶다고 가정하고, 몽땅 골라볼께!
파일 사이즈는 0바이트야.
이렇게 해주면 돼.
이 웹사이트가 웃긴게 많은 사람들이 여기에 자신의 Library를 만들고
다른 사람들이 자신의 것을 다운받아주길 원해.
예시를 하나 보여줄게. 아직 무서워 하진마.
HTML이 뭔지 알지?
ID가 뭔줄도 알고 말이야.
예를 들어 내가 JavaScript에서 ID를 갖고 싶으면
HTML 파일로 들어가고 싶으면 아이디 하나를 잡고
JavaScript에서 화면에 보이는 이걸 이용해야해.
하지만 만약 내가 Dojo같은 걸 이용한다면
이걸 써야겠지.
PrototypeJS를 쓰면 이걸 복사해서 쓰고, Jquery를 쓰면 이걸 쓰고.
만약 Yahoo UI를 쓰면 이걸 쓰면 돼고.
MooTools면 이걸 쓰면 돼.
그리고 이 전부가
맨위에 적힌 이걸 다른 프로그램에서 실행하기 위한 코드야.
이게 내가 너희에게 Dojo나 Jquery같은 걸 안가르치는 이유야.
나는 너희에게 Make-up(대체할 수 있는 것)이 아닌 실질적인걸 알려주고 싶거든.
여기 전부가
전부가
이 코드를 다르게 해석한 것일 뿐이야.
여기 보이는 것처럼 일반 JavaScript가 다른 것들에 비해 엄청 빨라.
120만개가 넘는 Operation을 1초에 할 수 있지.
완전 멋있지?
좋아.
여기까지가 Vanilla JS는 어떤건지 왜 이걸 공부해야하는지에 대한 설명을 한거야.
Vanilla JS를 잘하게 되고 이 언어에 대해 더 많이 알게되면
VanillaJS를 이해하게 되면
리액트와 같은 다른 언어로 넘어갈 때도, 아무런 문제가 없을거야.
다른 언어를 시작할때 문제가 없을 거라는 얘기야.
비디오 게임이나 다른 것들을 만들때도.
JavaScript의 영향력을 알게될거야.
업무를 하면서 마주하는 거의 모든 Library를 이해할 수 있게 될거야.
아까 본 3D같은 경우도
3가지의 JS로 구성이 되어있었어.
너희들의 경우엔 그런걸 만드는 작업을 바로 할 수 있어.
너는 모든 웹의 베이스가 되는 언어를 알게 될거니까.
그리고 그게 이 영상의 중점이 될거야.
Vanilla JavaScript를 배운다는건
웹에서의 기초가 되는 언어를 배우는 것과 같아.
이 언어는 예쁘고 우아하지는 않아.
답답한 부분이 굉장히 많을거야.
나중에 다 보게 될거야.
그러나, 웹상에서 본 모든 것들은 이 언어로 구성이 되어있어.
그래서 이 언어가 강력하지.
Vanilla JS에 대한 소개는 이정도면 충분하고.
아직까지도 왜 배워야 하는지 설득 당하지 못했다면
미안해. 내가 멋진 세일즈맨은 아니구먼.
만약 설득당했다면 당장 시작해봐.
왜냐면 다음 영상부터 JavaScript를 대체 어떻게 사용하면 되는지, 어디에 넣는건지 배울거거든.
다음영상에서 만나. Bye bye!

#1.4 Hello World with Javascript
자, 그럼 우리의 첫번째 연습 프로젝트로
일단 우리가 사용할 툴에 대해 알아보자.
원하는 에디터를 선택하기를 바래. 예를 들면, Visual Studio Code...
Atom이나 Sublime Text 등등 너희가 원하는걸로 말이야.
나는 Repl 이라는걸 사용할거야.
Repl은 꽤 괜찮아. Code Editor 같은 건데
다운로드가 굳이 필요 없거든.
그래서 내가 좋아하는 것이기도 하고.
개인 파일이랑 결과를 여기서 전부 볼 수 있어.
당연히 큰 프로젝트를 할때는 VSCode 도 사용하는데
컨셉을 보여준다거나 하는 용도의 작은 프로젝트는
그냥 Ripple만 사용할거야, 알겠지?
자, 처음으로 해야하는건
JavaScript를 어떻게 페이지에 추가하는지 알아야해.
이제 이 Ripple에서 이건 지워주고
여기에 파일이 준비되어있어.
그냥 평범한 HTML를 만들어줄건데
화면과 같이 입력
타이틀은...
화면과 같이 입력
그리고 이걸 넣고..
화면크기를 키웠더니 훨 낫네.
아마 우리 전부 CSS를 웹사이트에 어떻게 넣는지 알고 있을거야.
화면과 같이 입력
이렇게 하고 저장해주면돼.
이제 Index CSS로 가서 제대로 작동 되는지 확인해 보자.
화면과 같이 입력
색상은 빨간색으로.
저장하고
새로고침을 하고 결과를 한번 볼까.
코드 검토 중
화면과 같이 입력
한번 보자.
실행
제대로 되고 있네.
노란색 아니 빨간색으로 설정한 배경도 제대로 떴어.
이 부분은 좀 수정해줄게.
파란색
좋아, 새로고침.
이런.
다른색..
이게 그나마 낫다.
여기는 흰색으로 해주자.
이건 전에 했던거니까 잘 따라올 수 있지?
전에 하지 않았던 부분은
JS파일을 추가하는 부분일거야.
JS파일을 추가하는건 매우 간단해.
이게 왜 여기있지.
JS파일을 추가하는건 매우 간단해. 이번 케이스 같은 경우엔 JS파일이 맨 위에 뜨지 않을거야.
JS파일은 항상 Body 아래에 있어야해.
제일 마지막에 추가를 해야하지.
제일 마지막에 추가를 하는거야. 일단 추가를 하고 왜 그런지 설명을 해줄게.
화면과 같이 입력
이렇게 닫을 수 있는 링크랑은 다르게 Script는이렇게 닫아 줘야해.
HTML가 별로인 이유는 이것때문이지.
또 다른 이유는 너희가 원할경우에 JavaScript 코드를 여기에 이렇게 적어두면
이렇게 적어만 두면 되는데
우리는 전에 했던 것처럼 이렇게 진행하자.
이렇게 해도 괜찮을거야.
JavaScript가 우리 파일에서 제대로 실행되는지 보려면
테스트를 진행해서 실행이 제대로 되는지 보는거랑
왜 그런지 설명을 굳이 하자면 경고 메세지를 만들기 위해서라고 하자.
자, 나를 믿어. 이게 무슨 뜻인지 Function들이랑 기타등등을
다음 영상에서 다 설명해줄게. 일단 지금은 경고 메세지를 만들어보자.
화면과 같이 입력
좋아, 저장을 하고.
새로고침 해줄거야.
그리고 실행이 되는지 보자.
이 아름다운 걸 봐. 제대로 실행 되었어.
이제 우리는 경고메세지도 있어.
JavaScript로 제일 처음한 작업이야. 이걸 Hello world 라고 불러.
이거를 Hello world 언어 라고도 해. 경고메세지.
경고 메세지는 여기 이걸 전부 막아뒀어.
그래서 우리는 이 경고 메세지를 다른거랑 바꿔줄거야.
화면과 같이 입력
다음 영상에서 보다 자세히 배울거야 그러니까 걱정하지 않아도 돼. 약속해.
제대로 실행이 되면서 여기 console에 메세지가 뜨지.
아까는 경고메세지로 뜨던 내용이.
좋아. 여기 보이는 것처럼
HTML CSS에 JavaScript 파일을 추가하는건 매우 쉽고 심플해.
심플한 이유는 전에 말했듯이
모든 웹브라우져에는 JavaScript가 설치되어있어.
보통 소프트웨어 제품을 만들때 Haskell이라는 언어를 사용했다고 가정하면
소프트웨어가 만들어졌고, 내가 오픈을 해야할 때
언어에 따라 다르지만 이따금씩
Haskell을 설치해야 하는 경우가 있어.
내 컴퓨터에서 Haskell을 이해하려면 말이야.
그리고 이런 점이 가끔 불편하게 느껴질 때가 있지.
왜냐면 사람들이 모든 언어를 가지고 있지 않아서 다운로드를 받아야 하는데 이게 굉장히 귀찮거든.
JavaScript같은 경우엔 아무도 다운로드를 하지 않아도 돼.
브자우져랑 같이 이미 구성이 되어있거든.
그래서 JavaScript가 강력하다는거야.
그리고 여길 보면 우리는 설치를 한게없는데 이건 이미 실행이 되고 있어.
브라우져는 우리가 준 명령어를 알아들었고
우리는 그저 여기에 이렇게 적기만 했을뿐이야.
아주 좋아. 너희는 아주 예쁘고 가치있는 존재니까!
다음 영상에서는 JavaScript에서 우리가 해야하는 것들에 대해 더 설명을 해줄게
Variables라고 불리는 것에 대해 더 알려줄거야.
아, 소개영상에 빠뜨린 내용이 있었네
다음 영상에 그것도 넣어야겠다. Bye bye!

#1-5-1 What are we learning
내가 소개영상에서 빼먹은게 하나 있는데.
아마 많은 사람들이 궁금증을 품고 있는 내용일거야.
그 질문이 "내가 JavaScript를 배우면 Python도 배울 수 있게 될까?"
"JavaScript를 배우면.. Ruby도 배울 수 있을까?"
그리고 "그 언어들은 각각 얼마나 달라?"
내가 소개 영상에서 빼먹었지만 알려주고 싶은게 뭐냐면
내가 가르쳐주는대로 JavaScript를 배우게 되면
너희가 배우는건 그냥 JavaScript가 아닐거야.
너희가 배우는 건 컨셉이야. 그리고 그 컨셉은 모든 언어에서 일맥상통하지.
Haskell이라던지 조금 힘든 언어들 같은 경우엔
보다 더 많거나 적을 수는 있지만
컨셉은 대충 비슷해. Function을 배우고 Variable을 배우고
그 외에 조건들을 배우는거야. 이벤트도 배우고 모든 사람들에게서 오지 않은 이벤트에 관해서도 배워.
그리고 Class, Objects, Arrays 등등 모든걸 배우는거야.
다른 많은 언어에서도 같은거야.
그러니까 너무 걱정하지 않아도 돼.
우리가 배울 건 너희를 프로그래머로 만들어줄 것이기 때문이야.
자바스크립트만 할 수 있는 사람이 아니라
다른 프로그래밍 언어들도 알아들을 수 있게
예를 들어서 지금 여길보면 내가 Console log를 하는게 보이지.
만약 이게 Python이었으면 Console log 대신
이렇게 했을거야.
Print.
그러면 Console log랑 똑같이 실행이 되거든.
당연히 브라우져에서 Print는 실행이 안돼.
그래서 여기서는 에러라고 뜰거야.
그러니까 이건 지워주자.
우리는 컨셉에 대해 배울거야.
중요한 단어들이랑.
이걸 얘기해준다는 걸 잊었어.
그럼 다음영상에서 만나. Bye bye!

#1-6 Your first JS Variable(변수!)
좋아. 오늘 우리가 배울 첫 번째 주제는 바로...
변수. Variables
이게 무슨 뜻일까?
변수는 바로... 보자.
변수의 정의... 검색
이게 실제 뜻이야.
아냐, 이게 아니야
오 이런, 영어로 나와라.
변경되거나 변경될 수 있는 것.
좋아, 예를 들면...
수학으로 한 번 생각해보자.
변수가 뭐라고 생각해?
내 생각에 변수는 A가 될 수 있어.
A는 바뀔 수 있어.
이 뜻은 A는 지금 아무 것도 아니지만, 이제 이걸 2로 바꿔볼 거야.
A는 존재하지 않았지만, 지금은 A가 있고.
A는 2야. 이렇게 만들었어.
그리고 이제 이걸 바꾸고 싶어. 이걸 221로 바꾸고 싶어.
난 이걸 할 수 있어. 이게 변수야.
이제 다른 변수를 만들어보자.
음... 이제... 이거 왜 이래?
그리고 B는 이제 A - 5야.
좋아. 이제 계산해봐.
B는 어떤 값이 될까?
우리는 매우 게을러. 왜냐면 프로그래밍은 게으른 사람을 위한 것이기 때문이야.
그러니까 그냥 출력을 해보자. console log...
우리는 이게 무슨 뜻인지 이해해야 해.
괄호를 왜 써야 하는지, 이 '.'을 왜 넣어야 하는지.
log() 대신에 말이야. 이게 console.log()보다 나아보이지만 말야.
나중에 모두 이해하게 될 거야.
a를 console.log 하고
아냐, b를 console.log 하자. b의 값이 알고 싶으니까.
왜냐면 나는 이 계산을 하기 싫으니까. JavaScript가 해주길 원해.
좋아. 이제 보자.
실행해보자.
216.
흥미롭군.
완전 멋져.
난 단지 뭔갈 적었는데, 언어가 이해했어.
축하해. 너의 첫 변수야!
엄청 쉬워.
JavaScript로 변수를 만드는 건 쉬워.
이건 아주 좋은 JavaScript 코드는 아니야.
왜냐면 너도 알다시피
JavaScript는 프로그래밍 언어야.
이제...
프로그래밍 언어는 일반적인 언어처럼
따라야 하는 규칙과 문법이 있어.
JavaScript의 경우에는
이런 문제점을 발견했어.
JavaScript의 문제점은 네가 나쁜 것을 하는 걸 허용해.
JavaScript는 자식을 훈육하지 않는 아빠같아.
이 뜻은... 예를 들어보자.
너는 A를 이렇게 쓸 수 있어.
그러면 JavaScript는 너를 최대한 이해하기 위해 노력할 거야.
너를 판단하지 않고, 단지 너를 사랑할 거야.
단지 너를 이해하려할 거고, 실행하기 위해 최선을 다할 거야.
네가 입력한 것들을 말이야.
심지어 그게 좋은 문법이 아니더라도 말이야.
그래서 만약 우리가 문법을 철저하게 지켜서 만들려면,
몇 가지를 주의하면 돼.
보다시피, 라인 1, 2 그리고 3이 있어.
보통 프로그래밍 세계에서는
모든 것이 다른 라인에 있어.
내 말은, JavaScript가 엉망이라고 생각할 수도 있는데,..
만약 이렇게 하면, 에러가 생길 거야.
잘 모르겠다. 아마 에러가 생길 거야.
에러가 생겼네.
만약 에러가 생기지 않았으면 좀 부끄러웠을 거야.
보다시피 우리는 모든 것을 다른 라인에 적을 거야.
모든 instructions은 각기 다른 라인에 있어.
자 이제,
이 라인들을 'Lines'이라고 부르는 대신에 'Expressions'이라고 부를 거야.
모든 expressions는 한 줄에 있어야 해.
모든 instructions도 한 줄에 있어야 하듯이.
한 expression이 끝나는 곳을 선언하는 방법은
이렇게 하면 돼.
카카오톡 수업을 들은 사람들은 CSS도 알 거야,
그리고 CSS에서는 같은 걸 가지고 있어.
';'을 CSS 스타일 속성 끝에 넣어야 하지.
JavaScript에서도 똑같아.
instructions를 제외하고 말이야.
이건 단지 JavaScript의 문법 중 하나일 뿐이야.
다른 문법은 변수를 이렇게 시작하면 안 된다는 거야.
하면 안 돼.
왜일까? 이유는 바로...
두 종류의 변수가 있기 때문이야.
우리는 이걸 나중에 볼 거야.
하지만 기본적으로 이런 방식은 좋은 방법이 아니야.
우리가 필요한 건 이 파일의 시작에 무언가를 더해주는 거야.
아, 미안. 파일의 시작이 아니라 변수의 시작에 말이야.
이거에 대해서는 다음에 이야기 할 거야.
변수를 만들고 싶을 때는 기본적으로 이렇게 작동해.
먼저 변수를 생성하고,
다음으로 이걸 초기화 하고,
그리고 사용하면 돼.
알았지? 이건 아주 쉬운 거야. 생성하고, 초기화하고, 사용하면 돼.
필요할 때는 생성과 초기화를 동시에 할 수 있어.
그리고 나중에 사용할 수 있지.
그래서 이 경우에는
여기서 a를 생성하고, 숫자 221로 초기화한 거야.
이게 초기화야. 이걸 같은 라인에서 할 수 있어.
그리고 나중에 사용했지.
규칙은 바로 변수를 초기화하기 전에 이 단어를 넣어야 해.
앞에 말이야.
let가 무얼 뜻하는지 알았었는데, 깜빡했으니 찾아보자.
엄청 멍청해보이네.
let...
무슨 뜻인지 모르겠네
이름 설명.
let은 수학적 상태...
이전보다 더 혼란스럽군?
뭐 어쨌든...검색하지 말고.
let을 처음에 써줘야 해.
다음 비디오에서는 왜인지 이해할 거야.
왜 let을 쓰는지, 다른 게 아닌지. 다른 게 하나 더 있어.
다음 비디오에서 이걸 이해할 필요가 있어.
그러면 문법을 따라 해보자.
이제 너는 '이봐 니꼬, 왜 여기엔 let을 안 쓴 거야?'라고 말할 거야.
let
이렇게 하지 않은 이유는
변수를 초기화하거나 생성할 때에는 let을 써야하지만
이걸 사용할 때는 쓰지 않아도 돼.
이미 생성된 것을 사용할 때는 단지 참조만 하면 돼.
나는 이걸 2번 라인에서 쓰고 있고,
let을 쓰지 않았어. 왜냐면 1번 라인에서 선언했기 때문이야.
초기화 했지.
만약 이것들을 지우고,
전처럼 다시 돌려놓으면,
이미 초기화하고 사용하는 것처럼 작동해. 이건 별로야.
좋지 않아.
이건 내가 할 게 아니야. 알았지?
자, 기억해. 나는 초기화했고,
또한 생성했고, 그러면 사용할 수 있어.
왜냐면 우리가 설정한 변수와 변수가 같기 때문이지.
변수는 가변적이기 때문에 변할 수 있어.
우리는 또한 a도 바꿀 수 있어.
예를 들어 이렇게 말이야. (a=4)
a를 console.log 하고 어떻게 나오는지 보자.
이걸 실행하고 첫번째로 나오는 것과 두 번째로 나오는 걸 보자
이것 봐. 첫 번째는 b야.
이걸 잠깐 봐!
첫 번째는 b야. 우리가 가져온 첫 번째야.
b는 216이야
처음에 a = 221라고 했고,
그러면 b는 221 - 5야.
이건 216이야.
그리고 나중에 a를 4로 수정했어.
그리고 a를 console.log 했지
그리고 우리는 4를 얻었어.
이전 값인 221은 사라졌어.
이건 a = 4로 대체되었어.
다시, 이걸 깜빡했어.
여기서는 let을 쓰지 않았고, 다시 선언하지 않았어.
단지 a를 업데이트 했어.
보다시피 JavaScript는 너의 코드를 위에서 아래로 실행해
먼저 a는 221이고
여기서도 221이고
여기서는 4가 돼.
위에서 아래로.
이게 JavaScript의 변수에 대한 첫 번째 비디오야.
다음에는 변수에 대한 더 멋진 걸 발견할 거야
constants에 대해 이야기할 거거든.
그러면 다음 비디오에서 보자. Bye bye.

#1-7 let, const, var
내가 어떻게 A를 바꿨는지 봤을 거야.
처음의 A는 221이었고, 지금은 4가 되었어.
가끔은 이게 정확히 내가 원하는대로지만,
가끔은 정확히 내가 원하지 않는 거야.
가끔은 나는 이 변수의 값이 변하지 않기를 바래.
프로그래머들은 가끔 변수의 값을 바꿔.
에러를 눈치채지 못하거나
만약 1000라인의 JavaScript 코드를 가지고 있고,
어떤 이름의 변수를 사용한다면
info 같은 거 말이야.
생각해봐. info에 이거와 같이 let을 사용한다면,
아마 너는 1000줄 중에서 이걸 다시 사용할 거야.
info를 어떤 값으로 정하고 난 뒤에 이걸 알지 못하고 나중에
info를 다른 값으로 바꾸는 거지
이건 별로야.
왜냐면 만약 문제가 발생했을 때 무슨 일이 일어났는지 알 수 없기 때문이야.
지금 나처럼 말이야.
마구 혼란스러울 수가 있지.
그래서 이걸 해결하기 위해서
let 대신에 const라는 걸 사용할 거야.
const는 constant, 상수라는 뜻이야.
상수는 안정적이라는 뜻이야.
이건 변하지 않아.
이 경우에는 내가 틀리지 않다면, 이 부분를 하기 전에는
JavaScript가 이렇게 반응할 거야.
"잠깐만, A는 상수의 221이라고 했잖아.
왜 바꾸려고 하는 거야? 너는 바꿀 수 없어."
그러면 Run하고 어떤 일이 일어나는지 보자.
좋아.
이거 봐. 에러가 생겼어. Assignment to constant variable.
Assignment to constant variable. 이건 매우 중요해.
항상 에러를 읽으려고 시도하는 것 말이야.
프로그래머로서 에러를 읽을 수 있어야 해.
모든 정보나 대부분의 정보가 에러에 있기 때문이지.
그래서 무슨 일이 일어났냐면..
상수 변수에 대입.
이게 에러야.
왜냐면 이걸 할 수 없기 때문이지.
여기를 보면 라인을 알려줘.
정확한 문자도 말이야. 그러니까 이게 나한테 3번째 라인에 ...
문제는 3번째에 있다고 알려주는 거야.
이게 문제야.
상수에는 대입을 할 수 없어.
그래서...
만약 다른 사람들이 너의 변수를 바꿀 수 없게 하려면
const를 사용해야할 거야.
너의 변수가 바뀌어도 괜찮다면, let을 사용해야 하고.
모든 게 잘 작동하네.
왜냐면 let은 변수가 바뀌는 걸 허용하기 때문이지.
네가 원하는 만큼 말이야.
그게 let과 const의 유일한 다른 점이야.
let만이 값을 다른 값으로 바꿀 수 있고,
const는 아니야.
이게 JavaScript의 변수에 대한 이야기야.
쉬워. 아주 쉬워.
이제... 만약 JavaScript를 어떻게 배우는지 튜토리얼을 찾고 있다면
var을 쓰는 것들을 본 적이 있다면 말이야
이건 var = varible을 뜻하지.
이것의 문제는
사실 var의 문제는 별로 많지 않아.
문제는 JavaScript가 var을 적용한 이상한 규칙이 있어.
그리고 let을 쓴 것처럼 var도 값을 바꿀 수 있어.
이것 처럼 말이야
역시 완벽하게 작동하지.
하지만 이게 바뀌는지 아닌지는 중요하지 않아.
그러니까 이걸 다시 let으로 바꾸고
바뀌지 않는 건 const로 바꾸자.
아마 3년 전에 우리는 var만 쓸 수 있었어.
const나 let이 없었지.
그러니까 지금이 딱 배우기 좋은 시기야.
좋아. 다음 비디오에서 보자.
다음에는...
변수에 넣을 수 있는 Data의 종류에 대해 알아볼 거야.
지금은 숫자만 넣어봤지만, 다른 건 어떤 게 들어갈 수 있는지 말이야.
다음 비디오에서 보자! Bye Bye

#1-8 Data Types on JS
본격적으로 들어가기 전에,
우리가 여기에 뭘 저장할지
미니노트를 여기에 해보자,
코멘트라는 건데.
일명 코멘트(주석)라 하지
너의 코드에 남길 수 있는, 노트 같은거야!
코멘트(주석처리)되지 않는 모든 코드는 프로그램이 실행하려고 하지
때론 그게 싫을 때가 있어!!
나 혼자만을 위한 노트를 코드에 적고 싶을 때가 있고
모르겠어....라고 메모하고 싶을때도 있고
예를 들면, "pls help me" 를 적고 싶을때
아니면 아마도 뭔가 네가 기억하고 싶은거를 적을 수 있지
예를 들면 "to do : finish this" 같이
여기 보다시피, 나는 요 두개 //를 썼어
// 이거는 JavaScript한테
"야 여기에 쓰는건 뭐든 보지마, 알았쥐" 라는 하는 거야
보지도 건들지도 마
실행하지마
만약 이렇게 하면(// 없애버리면) ?
아마도 에러가 날꺼임. to도 그렇고 finish도 그렇고 존재하지 않으니깐
do하고 this는 키워드라 있긴 한데.....그래도 실행 안될꺼임
코멘트를 사용해 보자
// 요건 한줄처리 주석이야
예를 들면...
근데 만약 네가 여러줄을 하고 싶잖아
이렇게 한줄 한줄씩 주석을 주는게 아니라
요렇게 앞에 /* 넣고
끝에 */ 넣으면 됨
멀티라인 코멘트지. 그렇게 중요한건 아닌데
이게 막 우리 삶을 바꾸고 하진 않는데
난 이제 사용 많이 할꺼임!
여기에 뭘 저장할 수 있을까?
아아, 이거 이전 비디오에서 설명한건데..
지금 잠시 얘기 하자면,
변수를 선언할때는 기본으로 const를 쓰도록!
너가 필요할때까지 let 쓰지마!!
첫 사용은 const로, 진짜 필요할때만 let !
자, 그럼 뭘 저장 할 수 있느냐
먼저 변수에 저장해보자
저장 한다는 의미는 이걸 저기에 넣는다는 뜻이야
내가 전에 했던 a=3, b=4 같은거
string을 해보자!
string은...
(string 검색 결과임.........DuckDuckGO를 사용하면 이렇게 나오는군요...ㄷ ㄷ ㄷ )
이게 string 임.
검색 안전모드를 꺼놔서 그렇구만.
이것도 뭐 스트링이니...뭐.....;;;;;
자 이게 스트링 입니다!
스트링이라 하면
모든걸 같이 붙이는 거야!
이건 엔딩을 가지고 있는 것.
보통 스트링은 텍스트 스트링을 말하지.
요렇게 하면 색깔이 지정되는거야.
그리고 "Nicolas"라고 입력해보자.
그럼 내 텍스트가 저장되겠지?
만약에 내가 ""를 제거하면
프로그램은 Nicolas라는 키워드를 어디선가 찾으려고 하겠지.
근데 찾을 수 없겠지?
그럼 그게 문제인거야!
여기보면 "Nicolas is not defined"라고 나오는거 보이지?
왜냐면 프로그램은 Nicolas가 what같은거라고 보는 거야.
b=a-5라는 거 이전비디오에서 봤지?
Nicolas가 어딘가 있는데 찾을 수 없는 거라고 보는 거지. 아직 존재하지 않으니까.
만약에 ""를 넣어 주면
이제 Nicolas가 존재하고 문제없이 실행되죠
이렇게 쓰는거 잊지 마셈.
이제 consol.log를 해보자
console.log(what);
그리고 보다시피. ....
봐, what은 Nicolas라고 나오지!
자! 텍스트를 저장하는걸 봤어!
어떤 텍스트를 저장할 수 있느냐면
어떤거든 됨.
이모티콘도 되려나?
가능해! 이모티콘도 텍스트니 가능한거지!
그러나 헷갈리지마! 너가 "" 사이에 숫자를 막 이렇게 넣으면
이건 텍스트야! 숫자가 아니고!
조심히 써야해!
가끔은 텍스트를 넣고 때론 숫자를 넣는거야
자, 첫번째는 스트링이었어
코멘트 처리 하고, 다른걸 해보자!
다른 것을 해보자구....
Boolean!!
Boolean이란 True or False야
위와 같이 작성...
Boolean은 이렇게 써 const wat = false;
혹은 const wat = true;
모두 소문자로 쓰고, "" 없이 쓰지
왜냐 이건 텍스트가 아니니깐
바이너리 세계에선 (이진법) 모든 것은 0 or 1 이야
true 는 1, false는 0 이지
그래서 너는 true/false로 저장할 수 있어
실제 어플리케이션에서는 어떻게 쓰는지 나중에 같이 살펴 볼꺼야
지금 한가지 기억할 것은...
이 명칭들은 진짜 기억 할 필요 없어
Boolean 기억할 필요 없어... 난 어디서 온지도 모른다고
String도 마찬가지. 암기하려고 하지마.
기억하고 싶으면 텍스트, true/false를 기억하도록!
단지 알아야 할 껀 true/false는 텍스트가 아니라는거!
이제 한개를 더 해보려고 하는데....
그건 바로 Number야
숫자가 뭔진 알지?
설명 안해도 알꺼야
console.log해서 보면 걍 되지
다른걸로 넘어와서 float 을 보여줄께.
float는 숫자인데 floating number (떠돌이 소숫점)를 가지고 있어.
.1 처럼 말이야.
55.1 ..... 0.1이란 떠돌이 소숫점이 있는거야!
,(콤마) 노노 .(점)
한번 볼까 float javascript
오 . (점) 맞네 잠시 , (콤마)인가 했어
다시 말하지만, 날 믿어.
내 경험상 말하는데 암기할 필요 없어!
난 그냥 내가 string이라고 말했을때 다른거로 오해 하지 않기를 바랄뿐이야!
우린 string(텍스트), true/false, 숫자(66), float(55.1)를 봤어
다음 강의에서는...
이걸 어떻게 정렬할 수 있는지 살펴보자.
예를 들면 여기에 name를 쓰는거지 const name = "Nicolas"
변수명이 name
여긴 gender , const gender = true/false
여긴 age
근데 이걸 어떻게 함께 쓸까?
어떻게 모두 정렬해서 쓰는지 다음편에 보도록 하겠어.
자바스크립트에서 어떻게 데이터를 정렬해야 할까
시청해줘서 고맙고. 다음 강의에서 보자!

#1-9 Organizing Data with Arrays
자! 그럼, 어떻게 우리가 가진 데이터 타입을 정렬할까?!
정답은 2가지야
이 두개는 각 언어 안에서 찾을 수 있는데
우리는 특별히 여기서 자바스크립트로 볼꺼야
하나는 Array야
다른건 Object라고 부르지
Object가 무슨 의미 인지는 알지
어디 Array관련 이미지를 찾아 보자
우리가 이미지를 찾을 수 있는지 모르겠지만 어디 보자
이런 없네 ㅡㅡ
Array는 데이터를 저장하는 곳인데, 리스트 같이 저장하는 거야
예를 들어 만약에 우리가 요일을 정렬한다고 하면
아마 이렇게 할꺼야
const daysOfWeek =
이 이름 봐봐
자바스크립트가 갖고있는 것인데. 문법을 위한 규칙이 필요해!
이렇게 작성하면...
daysofweek 이라고 써도 오류는 없어
근데 일하는 동료 혹은 나중에 네 자신도
이걸 보면 만든 사람에게 분노하게 될꺼야
왜냐면 이건 Camel case라는 방식으로 써야 하거든
camel(낙타)는 등이 구불구불 하잖아
camel case란 변수명을 언제나 소문자로 시작해서
만약에 변수명 중간에 스페이스가 필요하면 스페이스 대신에
왜냐 자바스크립트엔 스페이스를 변수명에 쓸 수 없으니
스페이스 대신에 대문자를 써주고 그 다음 다른 단어를 쓰는 거야
만약 또 다른 스페이스를 넣고 싶으면 다시 다음 단어 첫글자를 대문자로 써주는 거지
항상 소문자로 시작하고 스페이스가 필요하면 다음 단어에 대문자를 넣어 주는 거야
스페이스가 없더라도 변수명에 이상한 문자 넣으면 안됨!
.(점)으로 시작하는거 같이 말이야!
/로 시작하는 변수로 쓸 수가 없어
미래의 너 한테 미움 받지 않으려면 꼭 이렇게 작성하도록해!
daysOfWeek이란 Array를 만들고 싶어
그럼 어떻게 해야 하나
예를 들면...
monday
위와 같이 입력...
자! 이제 누군가 너의 데이터 베이스에 있는 모든 요일을 보고 싶다고 하면,
어썸. 난 개발자 이니까. 이렇게 할 수 있어.
console.log에 찍으면, 첫번째는 월요일....
위와 같이 입력...
그러면 "와우 멋져" 하겠지.
잘 찍히네
근데 이건 전혀 효과적이지 않아
우리 이걸 하나로 묶을 수 있어
그것을 Array라고 부르지!
Array는 여러 string들을 하나로 묶는 거야
위와 같이 입력....
어떻게 Array를 만드는지 알아?
엄청 간단해
(지금 마이크 때문에 키보드가 안보여서 오타 작렬 중이야. 양해부탁해!)
array를 만들기 위해서.
const daysOfWeek = [] 이렇게 해주면 되
[] 의미가 Array 인거야
여기 사이에 무얼 넣으면 그게 Array가 되는 거야
물론 여기엔 우리가 전에 말한 데이터 타입만 쓸 수 있지,
텍스트, true/false, numbers, floats
우리의 경우는....이렇게 정리하자.
console.log(daysOfWeek);
(부서졌네...) 이제 콘솔로그 ...될꺼야!
여기서 한번 살펴봐.
,(콤마) 텍스트 ,(콤마)텍스트...
멋지지?
다른 걸 저장할 수 있냐고 물어보면.
당연하지!
true도 저장 할 수 있는 거지
마찬가지로 보일꺼야. 위에 것 + true가 보이겠지. 너가 원하는 건 다 해볼 수 있어.
너의 프로그램이니까. 그곳에선 너가 왕이라구!
자. 이렇게 정리를 하는 건데...
이건 array인데...
Array는 규칙을 가지고 있어
Array안에 규칙을 가지고 있어
예를 들면. 난 Array 3번째 요일을 알고 싶어! 라고 하면.
이렇게 하면 되지. daysOfWeek[2] 그리고 실행하면.
3번째에 저장된 요일인 Wed가 나오지
왜 3을 안쓰고 2를 쓰는 거야? 라고 궁금할 수 있어!
왜냐면, 컴퓨터는 사람이 아니야. 그래서 0부터 세기 시작해.
월요일은 0, 화요일 1, 수요일 2, 이렇게.
그래서 이렇게 2라고 작성한거야.
daysOfWeek[1]라고 하면 2번째 요일을
daysOfWeek[0]라고 하면 1번째 요일을 줄꺼야
만약 네가 daysOfWeek[432] 값을 가지고 싶으면?
undefined 존재하지 않아.
이게 데이터를 Array에 넣는 첫번째 방법이야
여기에 뭐든 넣고 싶은걸 넣으면 됨. 54, true, "stuff"
예를 들면....
위와 같이 입력
심지어 변수 something을 넣어도 됨.
전혀 문제 되지 않아!
이건 그냥 삭제하고
수정
아무 문제 없이 될꺼야.
이렇게 데이터를 array로 정렬할 수 있어.
다음편엔 Object로 데이터를 정렬해보자.
여기서 한거랑 살짝 다를꺼야! 다음편에 보자구!

#1-10 Organizing Data with Objects
이젠 Array가 어떻게 동작하는지 알았고
이제 Obejct 라고 불리는 것으로 데이터를 정렬해 보자규
Object하고 Array의 다른 점은
Object에는 각 value에 이름을 줄 수 있는 거지
만약 네가 리스트로 만들고 싶을땐 Array를 정의하겠지
간단하잖아. 그냥 리스트를 만들면 되니까.
월,화,수,목,금,토,일로 요일리스트를 만들 수 있어
그리고 나서 첫번째 값을 얻으려면 daysOfWeek[0]
두번째는 daysOfWeek[1]....이렇게 쭉~가면되지
근데 여기서 알아야 할건
만약 네가 네 개인 정보를 저장하고자 하고 싶다면
내 개인정보를 저장하려면 보자
Nicolas는 이름
나이는 55
Men값은 True
City는 Seoul
일단 이렇게 만들자!
누구도 이 데이터를 정렬된 방식으로 접근할 수 없어
왜냐면 이건 그냥 리스트니깐
nico info...(매직 키보드 너무 안맞음. 투덜투덜)
이제 우린 nicoInfo리스트를 가지고 있지
내가 원하는 방식으로 정렬되지 않았지
아 "이름이 뭐였더라" 하면
아 이름 젤 처음에 뒀지...... 하고
첫번째 꺼니깐 nicoInfo[0]
근데 이건 효율적이지 않지
그래서 우리가 소위 말하는 Object를 만들어 볼꺼야
어떻게 우리가 Array를 만드냐 하면 [] 를 쓰면됨.
[ (브라켓)] 을 앞 뒤로 써주는 거야
Object를 선언하기 위해서는 걍 { 컬리 브라켓 }을 써주면되
이게 Object를 생성하는 방법이야
Object는 Array같이 동작하지 않아
막 Array같이 적어 보자.
오류 났어! Array 가 아닌거야!
Object는 실제 객체를 만드는 거야
무슨말이냐면
label을 네가 저장하고 싶은 data에 줄 수 있는 거야
어떤 값들을 리스트로 나열하는 방법 대신
이렇게 해봐
name: "Nico",
age: 33,
gender: "Male",
isHandsome:true(!?!?!?)
이제 실행해보면
봐, 진짜 많이 다르지
그리고 차이점을 살펴봐.
name은 텍스트가 아니야 "name" 이라고 적지 않잖아
그냥 name이라고 적는 거야. 왜냐 이건 변수 니깐
좋아, 생성했어.
이제 "어떻게 gender에만 접근할 수 있어?"라고 물어 볼 수 있지
그럼 어떻게 하냐 nicoInfo.gender
그럼 난 gender 값만 받을꺼야.
데이터의 이름만 사용하는거야. 내가 붙인 이름들이지.
또한 내가 원하면. 이렇게 변경할 수 있음.
nicoInfo.gender = "Female"
앞뒤로 console.log를 찍어 보자
처음엔 "Male" 에서 "Female"로 바뀌었겠지
이게 자바스크립트의 재밌는 점 중의 하나야
nicoInfo안에 값은 바꿀 수 있어.
Const안에 있는 값을 (gender) 바꿀 수 있어
하지만 nicoInfo 자체는 바꿀 수 없어. 예를 들면.
nicoInfo = true
이건 내가 오류상황을 만들어 본거야
안에 있는 값을 바꾸는 것은 문제 되지 않는데.
데이터를 정렬하는데는 두가지 방법이 있는데
하나는 Array이고 다른 하나는 Object야
만약, DB에서 가져온 리스트 데이터라면, Array를 선택하고.
근데 만약 데이터를 합쳐서 만들어야 한다면
만약에 많은 사람들을 Array로 만든다고 하면
많은 niconfo라는 Array를 만들어야 할꺼야
nico info, lynn info, dal info, japan guy info... 등등
그 말은 이것들을 섞을 수 있다는 거야
Object를 Array 안에 넣을 수 있어!
또한.
favMovies:
제목은 '신과 함께...' (이거 보고 울었음)
favMovies: ["Along the gods", "LOTR", ""]
Array를 Object안에 넣었지.
이건 전혀~ 문제 없음
또 무슨 영화가 있을까...올드보이...
또한...
이렇게 해보자.
좋아하는 음식...
favFood, Object의 Array로 만들꺼야
위와 같이 입력...
이제 저장.
이렇게 포맷을 이쁘게 하고.
어떻게 보이나 살펴볼까?
수정 중...
걍 코드 보기 좋게 하려고 하는거야.
그냥 보기 좋게 하는거니깐. 안 해도 동작 잘 하니깐 신경쓰지마!
Object들의 Array를 만들었어
그것도 Object 안에
이제 마무리를 하고..
어디 console.log를 찍어 보자.
이제 니꼬 정보를 많이 알게 됐어
나의 개인적인 정보를 너무 많이 공개했군!
RUN
자. 이걸 봐.
name, age, gender, isHansome, favMovies
favFood Object안에 Array가 있고 그 안에 Object가 있는 거지
이게 데이터를 정렬하는 방법이고
여기에 기억해야 할게 있는데
JavaScript 문법. 규칙을 기억해야해.
콤마(,)를 빼먹지마!! 요기 요기! 매우 중요해.
그리고 String 쓸때 " 앞뒤에 넣는거 잊지마!
예를 들면, 여기서 끝에 "를 안쓴다고 하면
다음 "가 나올때까지 모두 텍스트로 취급하게될꺼야! 그래서 여기선 "LOTR," 이게 하나의 String
Oldboy는 텍스트가 아니고 그 뒤에 "가 나와서 그 뒤로 텍스트 취급을 하는 거지 그리고 나선..이상해지지
그러니 잊지말고 꼭 마지막에 "를 넣어줘!
만약에 네가 VSCode 나 atom같은 툴을 쓴다면
글자 색깔이 바뀔꺼야! 이는 너를 도와줄 수 있어. 특히 실수할 때!
또한. 콘솔로그를 읽는 거 잊지마.
여기 콤마(,)를 제거해 보자.
console.log 하고 에러를 읽기 바래 !
뭔가 예상하지 못한 걸 찾았다고 하네!
자. Google Chrome console 인데.
참. 지금 뜨는 에러들은 무시하도록.
이 에러만 보면 됨.
unexpected indentifier!
이 오류 메시지들을 읽을 줄 알면, 에러를 해결할 수 있어.
여기 재미있는 것이 하나 있는데.
JavaScript는 오류가 났는데 말야. HTML은 괜찮을꺼야.
만약에 JS가 말썽이어도 HTML/CSS은 상관없어!
자! 여기까지가 자바스크립트의 데이터 타잎 설명 이었어!
마음에 들었으면 좋겠고. 그 다음 비디오에선. 논리적인 것들을 배워볼꺼야.
지금까지는 논리적 코딩과 상관 없는 데이터 타입만 봤고
자바스크립의 간단한 룰, 문법을 보았고
데이터를 어떻게 Array로 정렬할지
Object로 정렬할지 봤어
실습이 필요하면 진행해보길 바라고.
Object만들어 보고 console.log에 찍어보고
예를 들어 Object에 접근하는 걸 해보면
위와 같이 입력...
이런 예시도 가능해.
혼자서 실습을 많이 해보길 바래.
그냥 이거만 보고 읽지만 말고, 내가 하는 것 처럼 직접 해보고. 실수 해보기를 바래.
다음편엔 이 데이터 타입을 이용해서 논리적인걸 해볼꺼야~~ 다음 강의에서 보자!
다음에 보자!